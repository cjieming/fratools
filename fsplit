#!/usr/bin/perl

use warnings;
use strict;
use fralib;
use POSIX qw(ceil floor);
use File::Basename;
use Getopt::Long;
use Pod::Usage;

=head1 NAME

fsplit

=head1 SYNOPSIS

fsplit [options] <filename>
  
    -v  verbose
    -d  debug
    -n  number of rows in each split file (inclusive of header) >1 
    
    usage: fsplit -n 500 pscalare.txt
    
    Splits a genotype/table file.
  
=head1 DESCRIPTION

=cut

#option variables
my $help;
my $n = 0;

#initialize options
Getopt::Long::Configure ('bundling');

if(!GetOptions ('n=i'=>\$n) 
    || $n<2 || scalar(@ARGV)==0)
{
    if ($help)
    {
        pod2usage(-verbose => 2);
    }
    else
    {
        pod2usage(1);
    }
}

my $file = $ARGV[0];

## input file
open(IN, $file) || die "Cannot open $file\n";

my $header = "";
my $headerProcessed = 0;
my $numlines = 0;
my @array;

while (<IN>)
{	
	
	if (!$headerProcessed)
	{
			chomp;
	    $header = $_;
    	$headerProcessed = 1;
	}
	else
	{
			chomp;
			push @array, $_;
			$numlines++;
 	}
}

#checks if file is splitted properly
my $splitFileNo = ceil($numlines/$n);

close(IN);

#checks if file is splitted properly
my $totalSize = 0;
for my $i (1..$splitFileNo)
{
	# open new file and write
  my ($name, $dir, $ext) = fileparse($file, '\..*');
	my $outFile = "$name" . "_split-" . $i . "$ext";

	open(OUT, ">$outFile") || die "Cannot open $outFile";
	
	print OUT "$header" . "\n"; 
	
	for (my $i=0;$i<$n;$i++)
	{
		my $line = shift @array;
		print OUT "$line" . "\n";
	}
	
	if($i == ($splitFileNo - 1))
	{
		$n = $numlines - floor($numlines/$n)*$n;
	}
#	print $n."\n"; ## debug
	close(OUT)
}

#if (-s $file != $totalSize-(($splitFileNo-1)*length($header)))
#{
#	warn "Splitting of $file appears to be corrupted";
#}

